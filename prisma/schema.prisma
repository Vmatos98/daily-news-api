// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  createdAt     DateTime @default(now())
  userCategory  UserCategory[]
  save          NewsSave[]
  votes         Votes[]
  }

model Category {
  id            Int      @id @default(autoincrement())
  name          String
  createdAt     DateTime @default(now())
  userCategory  UserCategory[]
  news          News[]
}

model UserCategory {
  id          Int      @id @default(autoincrement())
  userId      Int      
  categoryId  Int      
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  @@unique([userId, categoryId], name: "user_category_unique")
}

model News{
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  image         String
  url           String
  score         Int      @default(0)
  categoryId    Int
  category      Category @relation(fields: [categoryId], references: [id])
  createdAt     DateTime @default(now())  
  publicatedAt  String    
  save          NewsSave[]  
  votes         Votes[]
  @@unique(fields: [categoryId, id]) 
}

model Votes{
  id            Int      @id @default(autoincrement())
  userId        Int      
  newsId        Int 
  type          VoteType     
  user          User     @relation(fields: [userId], references: [id])
  news          News     @relation(fields: [newsId], references: [id])
  createdAt     DateTime @default(now())  
  @@unique([userId, newsId], name: "votes_unique")
}

model NewsSave {
  id          Int      @id @default(autoincrement())
  userId      Int      
  newsId      Int      
  news        News     @relation(fields: [newsId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

enum VoteType {
  HOT
  COLD
}